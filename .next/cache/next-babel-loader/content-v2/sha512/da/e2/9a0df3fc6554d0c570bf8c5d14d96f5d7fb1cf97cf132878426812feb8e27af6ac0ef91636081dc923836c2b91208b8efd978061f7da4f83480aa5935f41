{"ast":null,"code":"import withSession from '../../lib/session';\n\nconst meHandler = async (req, res) => {\n  const {\n    method,\n    session\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      {\n        const sessionToken = session === null || session === void 0 ? void 0 : session.get('token');\n\n        if (sessionToken) {\n          const result = await fetch(`${process.env.API_BASE}/api/v1/user/show?uid=${sessionToken.uid}`, {\n            headers: {\n              authorization: sessionToken.token\n            }\n          });\n          let data = null;\n\n          try {\n            data = await result.json();\n          } catch (error) {\n            console.error(error);\n          }\n\n          if (!result.ok) {\n            session === null || session === void 0 ? void 0 : session.unset('token');\n            await (session === null || session === void 0 ? void 0 : session.save());\n            res.status(result.status).json(data);\n            return;\n          }\n\n          res.status(200).json({\n            id: data.uid.toString(),\n            name: data.screenName,\n            avatar: data.avatar,\n            gender: data.gender,\n            credit: data.credit,\n            isLoggedIn: true\n          });\n        } else {\n          res.status(200).json({\n            isLoggedIn: false\n          });\n        }\n\n        break;\n      }\n\n    default:\n      res.setHeader('Allow', ['GET']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n};\n\nexport default withSession(meHandler);","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/pages/api/me.ts"],"names":["withSession","meHandler","req","res","method","session","sessionToken","get","result","fetch","process","env","API_BASE","uid","headers","authorization","token","data","json","error","console","ok","unset","save","status","id","toString","name","screenName","avatar","gender","credit","isLoggedIn","setHeader","end"],"mappings":"AAGA,OAAOA,WAAP,MAAwB,mBAAxB;;AAGA,MAAMC,SAAS,GAAG,OAChBC,GADgB,EAEhBC,GAFgB,KAGb;AACH,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBH,GAA5B;;AAEA,UAAQE,MAAR;AACE,SAAK,KAAL;AAAY;AACV,cAAME,YAAY,GAAGD,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEE,GAAT,CAA8B,OAA9B,CAArB;;AACA,YAAID,YAAJ,EAAkB;AAChB,gBAAME,MAAM,GAAG,MAAMC,KAAK,CACvB,GAAEC,OAAO,CAACC,GAAR,CAAYC,QAAS,yBAAwBN,YAAY,CAACO,GAAI,EADzC,EAExB;AAAEC,YAAAA,OAAO,EAAE;AAAEC,cAAAA,aAAa,EAAET,YAAY,CAACU;AAA9B;AAAX,WAFwB,CAA1B;AAIA,cAAIC,IAAI,GAAG,IAAX;;AACA,cAAI;AACFA,YAAAA,IAAI,GAAG,MAAMT,MAAM,CAACU,IAAP,EAAb;AACD,WAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,YAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AACD,cAAI,CAACX,MAAM,CAACa,EAAZ,EAAgB;AACdhB,YAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEiB,KAAT,CAAe,OAAf;AACA,mBAAMjB,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEkB,IAAT,EAAN;AACApB,YAAAA,GAAG,CAACqB,MAAJ,CAAWhB,MAAM,CAACgB,MAAlB,EAA0BN,IAA1B,CAA+BD,IAA/B;AACA;AACD;;AACDd,UAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AACnBO,YAAAA,EAAE,EAAER,IAAI,CAACJ,GAAL,CAASa,QAAT,EADe;AAEnBC,YAAAA,IAAI,EAAEV,IAAI,CAACW,UAFQ;AAGnBC,YAAAA,MAAM,EAAEZ,IAAI,CAACY,MAHM;AAInBC,YAAAA,MAAM,EAAEb,IAAI,CAACa,MAJM;AAKnBC,YAAAA,MAAM,EAAEd,IAAI,CAACc,MALM;AAMnBC,YAAAA,UAAU,EAAE;AANO,WAArB;AAQD,SAzBD,MAyBO;AACL7B,UAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEc,YAAAA,UAAU,EAAE;AAAd,WAArB;AACD;;AACD;AACD;;AACD;AACE7B,MAAAA,GAAG,CAAC8B,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACA9B,MAAAA,GAAG,CAACqB,MAAJ,CAAW,GAAX,EAAgBU,GAAhB,CAAqB,UAAS9B,MAAO,cAArC;AAnCJ;AAqCD,CA3CD;;AA6CA,eAAeJ,WAAW,CAACC,SAAD,CAA1B","sourcesContent":["import { NextApiResponse, NextApiRequest } from 'next'\nimport { Session } from 'next-iron-session'\n\nimport withSession from '../../lib/session'\nimport { AccessTokenInfo, UserType } from '../../typings/user'\n\nconst meHandler = async (\n  req: NextApiRequest & { session?: Session },\n  res: NextApiResponse<UserType>\n) => {\n  const { method, session } = req\n\n  switch (method) {\n    case 'GET': {\n      const sessionToken = session?.get<AccessTokenInfo>('token')\n      if (sessionToken) {\n        const result = await fetch(\n          `${process.env.API_BASE}/api/v1/user/show?uid=${sessionToken.uid}`,\n          { headers: { authorization: sessionToken.token } }\n        )\n        let data = null\n        try {\n          data = await result.json()\n        } catch (error) {\n          console.error(error)\n        }\n        if (!result.ok) {\n          session?.unset('token')\n          await session?.save()\n          res.status(result.status).json(data)\n          return\n        }\n        res.status(200).json({\n          id: data.uid.toString(),\n          name: data.screenName,\n          avatar: data.avatar,\n          gender: data.gender,\n          credit: data.credit,\n          isLoggedIn: true\n        })\n      } else {\n        res.status(200).json({ isLoggedIn: false })\n      }\n      break\n    }\n    default:\n      res.setHeader('Allow', ['GET'])\n      res.status(405).end(`Method ${method} Not Allowed`)\n  }\n}\n\nexport default withSession(meHandler)\n"]},"metadata":{},"sourceType":"module"}