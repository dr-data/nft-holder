{"ast":null,"code":"import withSession from '../../lib/session';\n\nconst offerHandler = async (req, res) => {\n  const {\n    method,\n    body,\n    session\n  } = req;\n  const {\n    id,\n    price\n  } = body;\n  const sessionToken = session === null || session === void 0 ? void 0 : session.get('token');\n\n  if (!sessionToken) {\n    res.status(401).end();\n    return;\n  }\n\n  switch (method) {\n    case 'POST':\n      {\n        const result = await fetch(`${process.env.API_BASE}/api/v1/user/offer`, {\n          method: 'POST',\n          body: JSON.stringify({\n            bid: id,\n            value: price\n          }),\n          headers: {\n            'Content-Type': 'application/json; charset=utf-8',\n            authorization: sessionToken.token\n          }\n        });\n\n        if (!result.ok) {\n          const data = await result.json();\n          res.status(result.status).json(data);\n          return;\n        }\n\n        res.status(200).end();\n        break;\n      }\n\n    default:\n      res.setHeader('Allow', ['POST']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n};\n\nexport default withSession(offerHandler);","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/pages/api/offer.ts"],"names":["withSession","offerHandler","req","res","method","body","session","id","price","sessionToken","get","status","end","result","fetch","process","env","API_BASE","JSON","stringify","bid","value","headers","authorization","token","ok","data","json","setHeader"],"mappings":"AAGA,OAAOA,WAAP,MAAwB,mBAAxB;;AAGA,MAAMC,YAAY,GAAG,OACnBC,GADmB,EAEnBC,GAFmB,KAGhB;AACH,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAA4BJ,GAAlC;AACA,QAAM;AAAEK,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAgBH,IAAtB;AAEA,QAAMI,YAAY,GAAGH,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEI,GAAT,CAA8B,OAA9B,CAArB;;AACA,MAAI,CAACD,YAAL,EAAmB;AACjBN,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA;AACD;;AAED,UAAQR,MAAR;AACE,SAAK,MAAL;AAAa;AACX,cAAMS,MAAM,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,QAAS,oBAAzB,EAA8C;AACtEb,UAAAA,MAAM,EAAE,MAD8D;AAEtEC,UAAAA,IAAI,EAAEa,IAAI,CAACC,SAAL,CAAe;AACnBC,YAAAA,GAAG,EAAEb,EADc;AAEnBc,YAAAA,KAAK,EAAEb;AAFY,WAAf,CAFgE;AAMtEc,UAAAA,OAAO,EAAE;AACP,4BAAgB,iCADT;AAEPC,YAAAA,aAAa,EAAEd,YAAY,CAACe;AAFrB;AAN6D,SAA9C,CAA1B;;AAWA,YAAI,CAACX,MAAM,CAACY,EAAZ,EAAgB;AACd,gBAAMC,IAAI,GAAG,MAAMb,MAAM,CAACc,IAAP,EAAnB;AACAxB,UAAAA,GAAG,CAACQ,MAAJ,CAAWE,MAAM,CAACF,MAAlB,EAA0BgB,IAA1B,CAA+BD,IAA/B;AACA;AACD;;AACDvB,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA;AACD;;AACD;AACET,MAAAA,GAAG,CAACyB,SAAJ,CAAc,OAAd,EAAuB,CAAC,MAAD,CAAvB;AACAzB,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAqB,UAASR,MAAO,cAArC;AAvBJ;AAyBD,CAtCD;;AAwCA,eAAeJ,WAAW,CAACC,YAAD,CAA1B","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport { Session } from 'next-iron-session'\n\nimport withSession from '../../lib/session'\nimport { AccessTokenInfo } from '../../typings/user'\n\nconst offerHandler = async (\n  req: NextApiRequest & { session?: Session },\n  res: NextApiResponse\n) => {\n  const { method, body, session } = req\n  const { id, price } = body\n\n  const sessionToken = session?.get<AccessTokenInfo>('token')\n  if (!sessionToken) {\n    res.status(401).end()\n    return\n  }\n\n  switch (method) {\n    case 'POST': {\n      const result = await fetch(`${process.env.API_BASE}/api/v1/user/offer`, {\n        method: 'POST',\n        body: JSON.stringify({\n          bid: id,\n          value: price\n        }),\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8',\n          authorization: sessionToken.token\n        }\n      })\n      if (!result.ok) {\n        const data = await result.json()\n        res.status(result.status).json(data)\n        return\n      }\n      res.status(200).end()\n      break\n    }\n    default:\n      res.setHeader('Allow', ['POST'])\n      res.status(405).end(`Method ${method} Not Allowed`)\n  }\n}\n\nexport default withSession(offerHandler)\n"]},"metadata":{},"sourceType":"module"}