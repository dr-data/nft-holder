{"ast":null,"code":"import withSession from '../../../lib/session';\n\nconst myOfferHandler = async (req, res) => {\n  const {\n    method,\n    query,\n    session\n  } = req;\n  const {\n    id\n  } = query;\n  const sessionToken = session === null || session === void 0 ? void 0 : session.get('token');\n\n  if (!sessionToken) {\n    res.status(401).end();\n    return;\n  }\n\n  switch (method) {\n    case 'GET':\n      {\n        const result = await fetch(`${process.env.API_BASE}/api/v1/user/offer/biggest?bid=${id}`, {\n          headers: {\n            authorization: sessionToken.token\n          }\n        });\n        let data = null;\n\n        try {\n          data = await result.json();\n        } catch (error) {\n          console.error(error);\n        }\n\n        if (!result.ok) {\n          res.status(result.status).json(data);\n          return;\n        }\n\n        if (!data.uid) {\n          res.status(204).end();\n          return;\n        }\n\n        res.status(200).json({\n          price: data.amount * 1,\n          expire: data.time * 1000\n        });\n        break;\n      }\n\n    default:\n      res.setHeader('Allow', ['GET']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n};\n\nexport default withSession(myOfferHandler);","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/pages/api/my/offer.ts"],"names":["withSession","myOfferHandler","req","res","method","query","session","id","sessionToken","get","status","end","result","fetch","process","env","API_BASE","headers","authorization","token","data","json","error","console","ok","uid","price","amount","expire","time","setHeader"],"mappings":"AAGA,OAAOA,WAAP,MAAwB,sBAAxB;;AAIA,MAAMC,cAAc,GAAG,OACrBC,GADqB,EAErBC,GAFqB,KAGlB;AACH,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAA6BJ,GAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAASF,KAAf;AAEA,QAAMG,YAAY,GAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,GAAT,CAA8B,OAA9B,CAArB;;AACA,MAAI,CAACD,YAAL,EAAmB;AACjBL,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA;AACD;;AAED,UAAQP,MAAR;AACE,SAAK,KAAL;AAAY;AACV,cAAMQ,MAAM,GAAG,MAAMC,KAAK,CACvB,GAAEC,OAAO,CAACC,GAAR,CAAYC,QAAS,kCAAiCT,EAAG,EADpC,EAExB;AACEU,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAEV,YAAY,CAACW;AADrB;AADX,SAFwB,CAA1B;AAQA,YAAIC,IAAI,GAAG,IAAX;;AACA,YAAI;AACFA,UAAAA,IAAI,GAAG,MAAMR,MAAM,CAACS,IAAP,EAAb;AACD,SAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AACD,YAAI,CAACV,MAAM,CAACY,EAAZ,EAAgB;AACdrB,UAAAA,GAAG,CAACO,MAAJ,CAAWE,MAAM,CAACF,MAAlB,EAA0BW,IAA1B,CAA+BD,IAA/B;AACA;AACD;;AACD,YAAI,CAACA,IAAI,CAACK,GAAV,EAAe;AACbtB,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA;AACD;;AACDR,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB;AACnBK,UAAAA,KAAK,EAAEN,IAAI,CAACO,MAAL,GAAc,CADF;AAEnBC,UAAAA,MAAM,EAAER,IAAI,CAACS,IAAL,GAAY;AAFD,SAArB;AAIA;AACD;;AACD;AACE1B,MAAAA,GAAG,CAAC2B,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACA3B,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAqB,UAASP,MAAO,cAArC;AAhCJ;AAkCD,CA/CD;;AAiDA,eAAeJ,WAAW,CAACC,cAAD,CAA1B","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport { Session } from 'next-iron-session'\n\nimport withSession from '../../../lib/session'\nimport { AccessTokenInfo } from '../../../typings/user'\nimport { MyOfferType } from '../../../typings/record'\n\nconst myOfferHandler = async (\n  req: NextApiRequest & { session?: Session },\n  res: NextApiResponse<MyOfferType>\n) => {\n  const { method, query, session } = req\n  const { id } = query\n\n  const sessionToken = session?.get<AccessTokenInfo>('token')\n  if (!sessionToken) {\n    res.status(401).end()\n    return\n  }\n\n  switch (method) {\n    case 'GET': {\n      const result = await fetch(\n        `${process.env.API_BASE}/api/v1/user/offer/biggest?bid=${id}`,\n        {\n          headers: {\n            authorization: sessionToken.token\n          }\n        }\n      )\n      let data = null\n      try {\n        data = await result.json()\n      } catch (error) {\n        console.error(error)\n      }\n      if (!result.ok) {\n        res.status(result.status).json(data)\n        return\n      }\n      if (!data.uid) {\n        res.status(204).end()\n        return\n      }\n      res.status(200).json({\n        price: data.amount * 1,\n        expire: data.time * 1000\n      })\n      break\n    }\n    default:\n      res.setHeader('Allow', ['GET'])\n      res.status(405).end(`Method ${method} Not Allowed`)\n  }\n}\n\nexport default withSession(myOfferHandler)\n"]},"metadata":{},"sourceType":"module"}