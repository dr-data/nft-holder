{"ast":null,"code":"import fetchRecords from '../../lib/fetch-records';\n\nconst recordsHandler = async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n  const {\n    id,\n    pageSize = 10,\n    current = 1\n  } = query;\n\n  switch (method) {\n    case 'GET':\n      {\n        try {\n          const data = await fetchRecords(id, Number(pageSize), Number(current));\n\n          if (data.list) {\n            res.status(200).json([...data.list.map(item => ({\n              id: item.id.toString(),\n              type: item.type === 'PAYED' ? 1 : 0,\n              expire: item.type === 'EXPIRE',\n              time: item.time * 1000,\n              price: item.amount * 1,\n              user: {\n                id: item.uid,\n                name: item.name\n              }\n            }))]);\n            return;\n          }\n\n          res.status(204).end();\n        } catch (error) {\n          console.error(error);\n          res.status(error.status).end();\n        }\n\n        break;\n      }\n\n    default:\n      res.setHeader('Allow', ['GET']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n};\n\nexport default recordsHandler;","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/pages/api/records.ts"],"names":["fetchRecords","recordsHandler","req","res","method","query","id","pageSize","current","data","Number","list","status","json","map","item","toString","type","expire","time","price","amount","user","uid","name","end","error","console","setHeader"],"mappings":"AAEA,OAAOA,YAAP,MAAyB,yBAAzB;;AAGA,MAAMC,cAAoD,GAAG,OAC3DC,GAD2D,EAE3DC,GAF2D,KAGxD;AACH,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;AACA,QAAM;AAAEI,IAAAA,EAAF;AAAMC,IAAAA,QAAQ,GAAG,EAAjB;AAAqBC,IAAAA,OAAO,GAAG;AAA/B,MAAqCH,KAA3C;;AAEA,UAAQD,MAAR;AACE,SAAK,KAAL;AAAY;AACV,YAAI;AACF,gBAAMK,IAAI,GAAG,MAAMT,YAAY,CAC7BM,EAD6B,EAE7BI,MAAM,CAACH,QAAD,CAFuB,EAG7BG,MAAM,CAACF,OAAD,CAHuB,CAA/B;;AAKA,cAAIC,IAAI,CAACE,IAAT,EAAe;AACbR,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB,GAAGJ,IAAI,CAACE,IAAL,CAAUG,GAAV,CAAeC,IAAD,KAAW;AAC1BT,cAAAA,EAAE,EAAES,IAAI,CAACT,EAAL,CAAQU,QAAR,EADsB;AAE1BC,cAAAA,IAAI,EAAGF,IAAI,CAACE,IAAL,KAAc,OAAd,GAAwB,CAAxB,GAA4B,CAFT;AAG1BC,cAAAA,MAAM,EAAEH,IAAI,CAACE,IAAL,KAAc,QAHI;AAI1BE,cAAAA,IAAI,EAAEJ,IAAI,CAACI,IAAL,GAAY,IAJQ;AAK1BC,cAAAA,KAAK,EAAEL,IAAI,CAACM,MAAL,GAAc,CALK;AAM1BC,cAAAA,IAAI,EAAE;AACJhB,gBAAAA,EAAE,EAAES,IAAI,CAACQ,GADL;AAEJC,gBAAAA,IAAI,EAAET,IAAI,CAACS;AAFP;AANoB,aAAX,CAAd,CADgB,CAArB;AAaA;AACD;;AACDrB,UAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBa,GAAhB;AACD,SAvBD,CAuBE,OAAOC,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAvB,UAAAA,GAAG,CAACS,MAAJ,CAAWc,KAAK,CAACd,MAAjB,EAAyBa,GAAzB;AACD;;AACD;AACD;;AACD;AACEtB,MAAAA,GAAG,CAACyB,SAAJ,CAAc,OAAd,EAAuB,CAAC,KAAD,CAAvB;AACAzB,MAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBa,GAAhB,CAAqB,UAASrB,MAAO,cAArC;AAjCJ;AAmCD,CA1CD;;AA4CA,eAAeH,cAAf","sourcesContent":["import { NextApiHandler } from 'next'\n\nimport fetchRecords from '../../lib/fetch-records'\nimport { RecordItemDataType, RecordItemType } from '../../typings/record'\n\nconst recordsHandler: NextApiHandler<RecordItemDataType[]> = async (\n  req,\n  res\n) => {\n  const { method, query } = req\n  const { id, pageSize = 10, current = 1 } = query\n\n  switch (method) {\n    case 'GET': {\n      try {\n        const data = await fetchRecords(\n          id as string,\n          Number(pageSize),\n          Number(current)\n        )\n        if (data.list) {\n          res.status(200).json([\n            ...data.list.map((item) => ({\n              id: item.id.toString(),\n              type: (item.type === 'PAYED' ? 1 : 0) as RecordItemType,\n              expire: item.type === 'EXPIRE',\n              time: item.time * 1000,\n              price: item.amount * 1,\n              user: {\n                id: item.uid,\n                name: item.name\n              }\n            }))\n          ])\n          return\n        }\n        res.status(204).end()\n      } catch (error) {\n        console.error(error)\n        res.status(error.status).end()\n      }\n      break\n    }\n    default:\n      res.setHeader('Allow', ['GET'])\n      res.status(405).end(`Method ${method} Not Allowed`)\n  }\n}\n\nexport default recordsHandler\n"]},"metadata":{},"sourceType":"module"}