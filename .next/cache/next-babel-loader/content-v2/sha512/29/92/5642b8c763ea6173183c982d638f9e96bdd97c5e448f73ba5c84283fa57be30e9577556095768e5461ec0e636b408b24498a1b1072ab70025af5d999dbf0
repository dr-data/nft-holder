{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joker/Desktop/ink/work/nft-holder/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joker/Desktop/ink/work/nft-holder/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function fetcher(_x, _x2) {\n  return _fetcher.apply(this, arguments);\n}\n\nfunction _fetcher() {\n  _fetcher = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, init) {\n    var res, error;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url, init);\n\n          case 2:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 10;\n              break;\n            }\n\n            error = new Error(res.statusText);\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            error.info = _context.sent;\n            error.status = res.status;\n            throw error;\n\n          case 10:\n            _context.prev = 10;\n            _context.next = 13;\n            return res.json();\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](10);\n            return _context.abrupt(\"return\", {});\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 16]]);\n  }));\n  return _fetcher.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/lib/fetcher.ts"],"names":["fetcher","url","init","fetch","res","ok","error","Error","statusText","json","info","status"],"mappings":";;AAWA,wBAA8BA,OAA9B;AAAA;AAAA;;;sEAAe,iBACbC,GADa,EAEbC,IAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIKC,KAAK,CAACF,GAAD,EAAMC,IAAN,CAJV;;AAAA;AAIPE,YAAAA,GAJO;;AAAA,gBAKRA,GAAG,CAACC,EALI;AAAA;AAAA;AAAA;;AAMLC,YAAAA,KANK,GAMG,IAAIC,KAAJ,CAAUH,GAAG,CAACI,UAAd,CANH;AAAA;AAAA,mBAOQJ,GAAG,CAACK,IAAJ,EAPR;;AAAA;AAOXH,YAAAA,KAAK,CAACI,IAPK;AAQXJ,YAAAA,KAAK,CAACK,MAAN,GAAeP,GAAG,CAACO,MAAnB;AARW,kBASLL,KATK;;AAAA;AAAA;AAAA;AAAA,mBAYEF,GAAG,CAACK,IAAJ,EAZF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAcJ,EAdI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["type BufferSource = ArrayBufferView | ArrayBuffer\n\ntype HeadersInit = Headers | string[][] | Record<string, string>\ntype BodyInit =\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | ReadableStream<Uint8Array>\n  | string\n\nexport default async function fetcher(\n  url: string,\n  init?: { method?: string; headers?: HeadersInit; body?: BodyInit | null }\n) {\n  const res = await fetch(url, init)\n  if (!res.ok) {\n    const error = new Error(res.statusText)\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n  try {\n    return await res.json()\n  } catch (error) {\n    return {}\n  }\n}\n"]},"metadata":{},"sourceType":"module"}