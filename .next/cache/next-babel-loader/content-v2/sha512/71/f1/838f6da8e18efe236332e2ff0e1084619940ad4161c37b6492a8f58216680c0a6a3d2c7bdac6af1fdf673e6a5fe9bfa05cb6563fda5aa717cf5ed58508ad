{"ast":null,"code":"import withSession from '../../../lib/session';\nimport fetchMyOffer from '../../../lib/fetch-my-offer';\n\nconst recordsHandler = async (req, res) => {\n  const {\n    method,\n    query,\n    session\n  } = req;\n  const {\n    pageSize = 10,\n    current = 1\n  } = query;\n  const sessionToken = session === null || session === void 0 ? void 0 : session.get('token');\n\n  if (!sessionToken) {\n    res.status(401).end();\n    return;\n  }\n\n  switch (method) {\n    case 'GET':\n      {\n        try {\n          const data = await fetchMyOffer(sessionToken.uid, sessionToken.token, Number(pageSize), Number(current));\n\n          if (data.list) {\n            res.status(200).json([...data.list.map(item => ({\n              id: item.data.data.id,\n              creator: {\n                id: item.data.data.user.id.toString(),\n                avatar: item.data.data.user.profile_image_url,\n                name: item.data.data.user.screen_name\n              },\n              quotedPrice: {\n                top: item.amount\n              },\n              content: item.data.data.text,\n              thumbnails: item.data.data.pics ? item.data.data.pics.map(item => item.url) : [],\n              repostsCount: item.data.data.reposts_count,\n              commentsCount: item.data.data.comments_count,\n              attitudesCount: item.data.data.attitudes_count\n            }))]);\n            return;\n          }\n\n          res.status(204).end();\n        } catch (error) {\n          console.error(error);\n          res.status(error.status).end();\n        }\n\n        break;\n      }\n\n    default:\n      res.setHeader('Allow', ['GET']);\n      res.status(405).end(`Method ${method} Not Allowed`);\n  }\n};\n\nexport default withSession(recordsHandler);","map":{"version":3,"sources":["/Users/joker/Desktop/ink/work/nft-holder/pages/api/user/offer.ts"],"names":["withSession","fetchMyOffer","recordsHandler","req","res","method","query","session","pageSize","current","sessionToken","get","status","end","data","uid","token","Number","list","json","map","item","id","creator","user","toString","avatar","profile_image_url","name","screen_name","quotedPrice","top","amount","content","text","thumbnails","pics","url","repostsCount","reposts_count","commentsCount","comments_count","attitudesCount","attitudes_count","error","console","setHeader"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport { Session } from 'next-iron-session'\n\nimport withSession from '../../../lib/session'\nimport fetchMyOffer from '../../../lib/fetch-my-offer'\nimport { AccessTokenInfo } from '../../../typings/user'\nimport { MyCardsItemType } from '../../../typings/card'\n\nconst recordsHandler = async (\n  req: NextApiRequest & { session?: Session },\n  res: NextApiResponse<MyCardsItemType[]>\n) => {\n  const { method, query, session } = req\n  const { pageSize = 10, current = 1 } = query\n\n  const sessionToken = session?.get<AccessTokenInfo>('token')\n  if (!sessionToken) {\n    res.status(401).end()\n    return\n  }\n\n  switch (method) {\n    case 'GET': {\n      try {\n        const data = await fetchMyOffer(\n          sessionToken.uid,\n          sessionToken.token,\n          Number(pageSize),\n          Number(current)\n        )\n        if (data.list) {\n          res.status(200).json([\n            ...data.list.map((item: any) => ({\n              id: item.data.data.id,\n              creator: {\n                id: item.data.data.user.id.toString(),\n                avatar: item.data.data.user.profile_image_url,\n                name: item.data.data.user.screen_name\n              },\n              quotedPrice: { top: item.amount },\n              content: item.data.data.text,\n              thumbnails: item.data.data.pics\n                ? item.data.data.pics.map((item: any) => item.url)\n                : [],\n              repostsCount: item.data.data.reposts_count,\n              commentsCount: item.data.data.comments_count,\n              attitudesCount: item.data.data.attitudes_count\n            }))\n          ])\n          return\n        }\n        res.status(204).end()\n      } catch (error) {\n        console.error(error)\n        res.status(error.status).end()\n      }\n      break\n    }\n    default:\n      res.setHeader('Allow', ['GET'])\n      res.status(405).end(`Method ${method} Not Allowed`)\n  }\n}\n\nexport default withSession(recordsHandler)\n"]},"metadata":{},"sourceType":"module"}